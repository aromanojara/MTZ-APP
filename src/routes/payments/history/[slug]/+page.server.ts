import { users } from '../../../../db/users';
import { trainings } from '../../../../db/trainings';
import type { PageServerLoad } from './$types';
import { ObjectId } from 'mongodb';
import { redirect } from "@sveltejs/kit";
import { payments } from '../../../../db/payments';

export const actions = {

	LeaveClass: async (event, params) => {
		
		const data = await event.request.formData();
		const name = data.get('name');
		const email = data.get('email');
		const picture = data.get('picture');

		let dataPayments = await payments.find({_id: new ObjectId(event.params.slug) }).toArray();

		const quotaLeft = parseInt(dataPayments[0].quotaLeft) + 1;
		const paid = parseInt(dataPayments[0].paid) - 1;	

		let date = new Date().toLocaleString("es-CL", {timeZone: 'America/Santiago'})
		const dia = date.substring(0, 5);
		const formattedDia = dia.replace("-", "/");
		const hora = date.substring(12, 17);
		const fullDate = formattedDia + " " + hora

		await payments.updateOne(
			{ _id: new ObjectId(event.params.slug) },
			{ 
				$pull: { 'paidPlayers': { email: email } },
				$set:{
					quotaLeft: quotaLeft,
					paid: paid,
					ready: false
				},
				$push: { 
					mestiDicom: {nombre: name, fecha: fullDate, email: email, picture: picture, sortDate: new Date()}
				},
			}
		);	
		
		throw redirect (303, '/payments/active/'+event.params.slug+'');
		
    }

};

export const load: PageServerLoad = async function({ params, cookies, locals }) {
	
	if (!locals.user) {
		throw redirect(302, "/")
		
	}
	
	const localsData = locals.user
	let joined = false;
	let dataUser = await users.find({ _id: localsData.email }).toArray();

	let disableUndoPaymentFlag = false
	let mestiDicomExistsFlag = false
	let dataPayments = await payments.find({_id: new ObjectId(params.slug) }).toArray();
	// Formatting Date and Hour
	
	dataPayments[0].fecha = dataPayments[0].date.toLocaleString("es-CL", {timeZone: 'America/Santiago'}).split(',')[0].replaceAll("-", "/");
	dataPayments[0].hora = dataPayments[0].date.toLocaleString("es-CL", {timeZone: 'America/Santiago'}).split(',')[1].slice(1, -3);	

	// Typecasts autogenerated object _id to string
	dataPayments[0]._id = dataPayments[0]._id.toString()
	
	// Retrocompatibility
	if (dataPayments[0].ready == true) {

		if (!dataPayments[0].paidPlayers) {
			dataPayments[0].paidPlayers = dataPayments[0].players
			disableUndoPaymentFlag = true
		}
	}

	if (dataPayments[0].mestiDicom) {
		mestiDicomExistsFlag = true
		// Sort mestiDicom by joined Date
		const sortedPlayers = dataPayments[0].mestiDicom.sort(
			(objA, objB) => Number(objA.sortDate) - Number(objB.sortDate),
		);

		// Replace with sorted dict
		dataPayments[0].mestiDicom = sortedPlayers
		
	}


	// Sort players by joined Date
	const sortedPlayers = dataPayments[0].paidPlayers.sort(
		(objA, objB) => Number(objA.sortDate) - Number(objB.sortDate),
	  );

	// Replace with sorted dict
	dataPayments[0].paidPlayers = sortedPlayers
	
	// Check if player joined main list
	if (dataPayments[0].paidPlayers.length >= 1) {
		for (let index = 0; index <= dataPayments[0].paidPlayers.length; index++){
		
			// Check with email
			try {
				if (dataPayments[0].paidPlayers[index].email == localsData.email) {
					joined = true;
					break
				}
			} catch (error) {
				joined = false;
			}
				
		} 

	} else {
		joined = false;
	}

	
		
	return{
		user: dataUser,
		payments: dataPayments,
		joined: joined,
		localsData: localsData,
		disableUndoPaymentFlag: disableUndoPaymentFlag,
		mestiDicomExistsFlag: mestiDicomExistsFlag
	}
}

